# This workflow will build and push an application to a Azure Kubernetes Service (AKS) cluster when you push your code
#
# This workflow assumes you have already created the target AKS cluster and have created an Azure Container Registry (ACR)
# The ACR should be attached to the AKS cluster
# For instructions see:
#   - https://docs.microsoft.com/en-us/azure/aks/kubernetes-walkthrough-portal
#   - https://docs.microsoft.com/en-us/azure/container-registry/container-registry-get-started-portal
#   - https://learn.microsoft.com/en-us/azure/aks/cluster-container-registry-integration?tabs=azure-cli#configure-acr-integration-for-existing-aks-clusters
#   - https://github.com/Azure/aks-create-action
#
# To configure this workflow:
#
# 1. Set the following secrets in your repository (instructions for getting these can be found at https://docs.microsoft.com/en-us/azure/developer/github/connect-from-azure?tabs=azure-cli%2Clinux):
#    - AZURE_CLIENT_ID
#    - AZURE_TENANT_ID
#    - AZURE_SUBSCRIPTION_ID
#
# 2. Set the following environment variables (or replace the values below):
#    - AZURE_CONTAINER_REGISTRY (name of your container registry / ACR)
#    - RESOURCE_GROUP (where your cluster is deployed)
#    - CONTAINER_NAME (name of the container image you would like to push up to your ACR)
#
# For more information on GitHub Actions for Azure, refer to https://github.com/Azure/Actions
# For more samples to get started with GitHub Action workflows to deploy to Azure, refer to https://github.com/Azure/actions-workflow-samples
# For more options with the actions used below please refer to https://github.com/Azure/login

name: Build and deploy an app to AKS

on:
  push:
    branches: ["main"]

env:
  AZURE_CONTAINER_REGISTRY: "acree4bvp4jscogs"
  CONTAINER_NAME: "catay-argo"
  RESOURCE_GROUP: "catay-argo-hack"

jobs:
  buildImage:
    permissions:
      contents: read
      id-token: write
    runs-on: ubuntu-latest
    steps:
      # Checks out the repository this file is in
      - uses: actions/checkout@v3

      # Logs in with your Azure credentials
      - name: Azure login
        uses: azure/login@v1.4.6
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      # Builds and pushes an image up to your Azure Container Registry
      - name: Build and push image to ACR
        run: |
          az acr build --image ${{ env.AZURE_CONTAINER_REGISTRY }}.azurecr.io/${{ env.CONTAINER_NAME }}:${{ github.sha }} --registry ${{ env.AZURE_CONTAINER_REGISTRY }} -g ${{ env.RESOURCE_GROUP }} .

  Update-K8s-Manifests:
    permissions:
      contents: read
      id-token: write
    name: Update K8s Deployment Manifest with Image Version
    needs: buildImage
    runs-on: ubuntu-latest
    steps:

    # Checks out the baseline repository
    - uses: actions/checkout@v2

    - name: Update image name in manifest file
      uses: azure/powershell@v1
      with:
        inlineScript: |
          $line = Get-Content deploy/node-app-deployment.yml | Select-String image: | Select-Object -ExpandProperty Line
          $content = Get-Content  deploy/node-app-deployment.yml
          $content | ForEach-Object {$_ -replace $line,"        image: ${{ env.AZURE_CONTAINER_REGISTRY }}.azurecr.io/${{ env.CONTAINER_NAME }}:${{ github.sha }}"} | Set-Content  deploy/node-app-deployment.yml
          azPSVersion: "latest"

    - name: Commit changes in manifest to repo
      run: |
        git config user.name "GitHub Actions Bot"
        git config user.email ""
        git add  deploy/node-app-deployment.yml
        git commit -m "Update image version in K8s Deployment manifests file"
        git push origin
